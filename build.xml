<?xml version="1.0"?>
<project default="compile" name="jasmin" xmlns:ivy="antlib:org.apache.ivy.ant">
  <property file="ant.settings" />
  <property name="build.compiler" value="extJavac"/>

  <property name="tables.dir" value="tables.out" />

  <property name="ivy.install.version" value="2.1.0-rc2" />
  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME" />
  </condition>
  <property name="ivy.home" value="${user.home}/.ivy2" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

  <path id="jas.src">
    <pathelement location="lib/jas/src/jas" />
  </path>

  <path id="autogen.src">
    <pathelement location="lib/jas/src/scm" />
    <pathelement location="generated" />
  </path>

  <path id="scm.src">
    <pathelement location="lib/jas/src" />
    <pathelement location="generated" />
  </path>

  <path id="compile.src">
    <pathelement location="src" />
    <pathelement location="generated" />
  </path>

  <macrodef name="java-compile">
    <attribute name="classpath" default="classes" />
    <attribute name="source" />
    <sequential>
      <javac destdir="classes"
             classpath="@{classpath}"
             encoding="${ant.build.javac.encoding}"
             debug="true"
             deprecation="true"
             optimize="true"
             source="${ant.build.javac.source}"
             target="${ant.build.javac.target}"
             includeantruntime="false">
        <src refid="@{source}" />
      </javac>
    </sequential>
  </macrodef>

  <target name="settings">
    <fail message="Please copy ant.settings.template to ant.settings, and set the variables in it." unless="java_cup.jar" />
  </target>

  <target name="compile" depends="settings, scm">
    <java-compile source="compile.src" classpath="classes:${java_cup.jar}" />
    <mkdir dir="classes/${tables.dir}/" />
    <copy todir="classes/${tables.dir}/">  
      <fileset dir="src/${tables.dir}/" includes="**"/>  
    </copy>

  </target>

  <target name="build_parser">
    <java classname="java_cup.Main" dir="src/jasmin" classpath="${java_cup.jar}">
      <arg line="src/jasmin/parser.cup" />
    </java>
    <move file="parser.java" tofile="src/jasmin/parser.java" />
    <move file="sym.java" tofile="src/jasmin/sym.java" />
    <mkdir dir="src/${tables.dir}/" />
    <move todir="src/${tables.dir}/">
      <fileset dir="${tables.dir}/"/>
    </move>
  </target>

  <target name="scm" depends="autogen_run">
    <java-compile source="scm.src" />
  </target>

  <target name="autogen_compile" depends="jas">
    <java-compile source="autogen.src" />
  </target>

  <target name="autogen_run" depends="autogen_compile, determine-autogen-uptodate" unless="autogen-uptodate">
    <java classname="scm.autogen.autogen" dir="generated/scm" classpath="classes" fork="true" />
  </target>

  <target name="determine-autogen-uptodate">
    <uptodate property="autogen-uptodate" srcfile="lib/jas/src/scm/autogen/autogen.java" targetfile="generated/scm/AutoInit.java" />
  </target>

  <target name="jas">
    <mkdir dir="classes" />
    <java-compile source="jas.src" />
  </target>

  <target name="clean">
    <delete quiet="true">
      <fileset dir="classes" includes="**/*.class" />
    </delete>
  </target>

  <target name="veryclean" depends="clean">
    <delete quiet="true">
      <fileset dir="generated/scm" includes="**/*" />
    </delete>
  </target>

  <target name="jasmin-jar" depends="compile">
    <mkdir dir="META-INF" />

    <manifest file="META-INF/MANIFEST.MF">
      <attribute name="Main-Class" value="jasmin.Main" />
      <attribute name="Implementation-Version" value="${jasmin.version}" />
    </manifest>
    <jar destfile="${release.loc}/jasminclasses-${jasmin.version}.jar" manifest="META-INF/MANIFEST.MF">
      <fileset dir="classes" />
    </jar>
    <delete dir="META-INF" />
  </target>

  <target name="jasmin-fulljar" depends="jasmin-jar">
    <mkdir dir="META-INF" />

    <manifest file="META-INF/MANIFEST.MF">
      <attribute name="Main-Class" value="jasmin.Main" />
      <attribute name="Implementation-Version" value="${jasmin.version}" />
    </manifest>

    <jar destfile="${release.loc}/jasmin-${jasmin.version}.jar" manifest="META-INF/MANIFEST.MF">
      <zipfileset src="${release.loc}/jasminclasses-${jasmin.version}.jar" />
      <zipfileset src="${java_cup.jar}" />
    </jar>
    <delete dir="META-INF" />
  </target>
  
  <target name="barebones" depends="clean, settings">
    <jar destfile="${release.loc}/jasminsrc-${jasmin.version}.jar">
      <fileset dir="." excludes="${release.loc}/**" />
    </jar>
    <tar destfile="${release.loc}/jasminsrc-${jasmin.version}.tar.gz" compression="gzip" longfile="gnu">
      <tarfileset dir="." excludes="${release.loc}/**" />
    </tar>
  </target>

  <!-- IVY RELATED TARGETS -->

  <target name="download-ivy" unless="offline">

    <mkdir dir="${ivy.jar.dir}"/>
    <!-- download Ivy from web site so that it can be used even without any special installation -->
    <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
         dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="init-ivy" depends="download-ivy">
    <!-- try to load ivy here from ivy home, in case the user has not already dropped
            it into ant's lib dir (note that the latter copy will always take precedence).
            We will not fail as long as local lib dir exists (it may be empty) and
            ivy is in at least one of ant's lib dir or the local lib dir. -->
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>
	
  <target name="gen-pom" depends="init-ivy">
	<ivy:makepom ivyfile="ivy.xml" pomfile="${release.loc}/${ant.project.name}-${jasmin.version}.pom">
		<mapping conf="default" scope="compile" />
	</ivy:makepom>
  </target>

  <target name="publish-local" depends="init-ivy, gen-pom, jasmin-fulljar, jasmin-jar, barebones">
    <ivy:resolve/>
    <ivy:publish pubrevision="${jasmin.version}" status="release" resolver="local" overwrite="true" >
      <artifacts pattern="${release.loc}/[artifact]-[revision].[ext]"/>
    </ivy:publish>
  </target>
	
  <target name="publish-local-maven" depends="init-ivy, gen-pom, jasmin-fulljar, jasmin-jar, barebones" description="publish jar/source to maven repo mounted at ~/.m2/repository">
		<ivy:resolve/>
		<ivy:publish pubrevision="${jasmin.version}" resolver="local-m2-publish" forcedeliver="true" overwrite="true" publishivy="false">
			<artifacts pattern="${release.loc}/[artifact]-[revision].[ext]" />
		</ivy:publish>
  </target>

</project>
